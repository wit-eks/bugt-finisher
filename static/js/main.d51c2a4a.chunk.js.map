{"version":3,"sources":["models/CheckPoint.tsx","models/CheckPointCoeficient.tsx","models/RaceResult.tsx","components/RaceResultEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CheckPoint","CheckPointCoeficient","Ornak","Murowaniec","Wodogrzmoty","Meta","RaceResult","meta","this","ornak","murowaniec","wodogrzmoty","RaceResultEditor","raceResult","onRecipeChanged","mins","maxs","steps","isMax","isMin","calculateAll","val","cp","updateRecipe","console","log","Math","round","item","value","updatedRecipe","key","keyItem","hasOwnProperty","toTimeString","Date","toISOString","substr","increaseButton","IconButton","onClick","increaseRecipe","color","decreaseButton","decreaseRecipe","Fragment","Typography","variant","Slider","min","max","step","onChange","_","marks","label","App","useState","setRecipe","Container","maxWidth","Box","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d51c2a4a.chunk.js","sourcesContent":["export enum CheckPoint{\r\n    Ornak = 'ornak',\r\n    Murowaniec = 'murowaniec',\r\n    Wodogrzmoty = 'wodogrzmoty',\r\n    Meta = 'meta'\r\n}","export enum CheckPointCoeficient{\r\n    Ornak = 3.1055785492419865,\r\n    Murowaniec = 1.7511041858341019,\r\n    Wodogrzmoty = 1.2285853586106557,\r\n    Meta = 1.0\r\n}\r\n\r\n/*\r\n(Ornak, 3.1055785492419865, 0)\r\n(Murowaniec, 1.7511041858341019, 0)\r\n(Wodogrzmoty, 1.2285853586106557, 0)\r\n\r\n*/","import { CheckPoint } from './CheckPoint';\r\nimport { CheckPointCoeficient } from './CheckPointCoeficient';\r\nexport class RaceResult{\r\n    [CheckPoint.Ornak]: number;\r\n    [CheckPoint.Murowaniec]: number;\r\n    [CheckPoint.Wodogrzmoty]: number;\r\n    [CheckPoint.Meta]: number;\r\n\r\n    constructor(meta: number) {\r\n        this.ornak = meta / CheckPointCoeficient.Ornak;\r\n        this.murowaniec = meta / CheckPointCoeficient.Murowaniec;\r\n        this.wodogrzmoty = meta / CheckPointCoeficient.Wodogrzmoty;\r\n        this.meta = meta;\r\n       }\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TextField from '@material-ui/core/Slider';\r\n\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { CheckPoint } from '../models/CheckPoint';\r\nimport { CheckPointCoeficient } from '../models/CheckPointCoeficient';\r\nimport { RaceResult } from '../models/RaceResult';\r\n\r\n//todo some export??\r\nexport interface RaceResultEditorProps {\r\n    raceResult: RaceResult;\r\n    onRecipeChanged: (raceResult: RaceResult) => void;\r\n}\r\n\r\n\r\nconst RaceResultEditor: React.SFC<RaceResultEditorProps> = ({ raceResult, onRecipeChanged }) => {\r\n    const mins = {\r\n        [CheckPoint.Ornak]: 2*3600,\r\n        [CheckPoint.Murowaniec]: 4*3600,\r\n        [CheckPoint.Wodogrzmoty]: 6*3600,\r\n        [CheckPoint.Meta]: 7*3600,\r\n    };\r\n    \r\n    const maxs = {\r\n        [CheckPoint.Ornak]: 8*3600,\r\n        [CheckPoint.Murowaniec]: 14*3600,\r\n        [CheckPoint.Wodogrzmoty]: 16*3600,\r\n        [CheckPoint.Meta]: 18*3600,\r\n    };\r\n\r\n        \r\n    const steps = {\r\n        [CheckPoint.Ornak]: 5*60,\r\n        [CheckPoint.Murowaniec]: 5*60,\r\n        [CheckPoint.Wodogrzmoty]: 5*60,\r\n        [CheckPoint.Meta]: 5*60,\r\n    };\r\n\r\n        \r\n    const isMax = {\r\n        [CheckPoint.Ornak]: () => raceResult.ornak >= maxs[CheckPoint.Ornak],\r\n        [CheckPoint.Murowaniec]:() => raceResult.murowaniec >= maxs[CheckPoint.Murowaniec],\r\n        [CheckPoint.Wodogrzmoty]: () => raceResult.wodogrzmoty >= maxs[CheckPoint.Wodogrzmoty],\r\n        [CheckPoint.Meta]: () => raceResult.meta >= maxs[CheckPoint.Meta],\r\n    };\r\n\r\n            \r\n    const isMin = {\r\n        [CheckPoint.Ornak]: () => raceResult.ornak <= mins[CheckPoint.Ornak],\r\n        [CheckPoint.Murowaniec]:() => raceResult.murowaniec <= mins[CheckPoint.Murowaniec],\r\n        [CheckPoint.Wodogrzmoty]: () => raceResult.wodogrzmoty <= mins[CheckPoint.Wodogrzmoty],\r\n        [CheckPoint.Meta]: () => raceResult.meta <= mins[CheckPoint.Meta],\r\n    };\r\n\r\n\r\n\r\n    const calculateAll= {\r\n        [CheckPoint.Ornak]: (val : number, cp: CheckPoint) => {\r\n            if (cp === CheckPoint.Murowaniec) return val * CheckPointCoeficient.Ornak / CheckPointCoeficient.Murowaniec;\r\n            if (cp === CheckPoint.Wodogrzmoty) return val * CheckPointCoeficient.Ornak / CheckPointCoeficient.Wodogrzmoty;\r\n            if (cp === CheckPoint.Meta) return val * CheckPointCoeficient.Ornak;\r\n            return val;},\r\n        [CheckPoint.Murowaniec]:  (val : number, cp: CheckPoint) => {\r\n            if (cp === CheckPoint.Ornak) return val * CheckPointCoeficient.Murowaniec / CheckPointCoeficient.Ornak;\r\n            if (cp === CheckPoint.Wodogrzmoty) return val * CheckPointCoeficient.Murowaniec / CheckPointCoeficient.Wodogrzmoty;\r\n            if (cp === CheckPoint.Meta) return val * CheckPointCoeficient.Murowaniec;\r\n            return val;},\r\n\r\n        [CheckPoint.Wodogrzmoty]:  (val : number, cp: CheckPoint) => {\r\n            if (cp === CheckPoint.Ornak) return val * CheckPointCoeficient.Wodogrzmoty / CheckPointCoeficient.Ornak;\r\n            if (cp === CheckPoint.Murowaniec) return val * CheckPointCoeficient.Wodogrzmoty / CheckPointCoeficient.Murowaniec;\r\n            if (cp === CheckPoint.Meta) return val * CheckPointCoeficient.Wodogrzmoty;\r\n            return val;},\r\n\r\n        [CheckPoint.Meta]:  (val : number, cp: CheckPoint) => {\r\n            if (cp === CheckPoint.Ornak) return val / CheckPointCoeficient.Ornak;\r\n            if (cp === CheckPoint.Murowaniec) return val / CheckPointCoeficient.Murowaniec;\r\n            if (cp === CheckPoint.Wodogrzmoty) return val / CheckPointCoeficient.Wodogrzmoty;\r\n            return val;}\r\n    };\r\n\r\n    const calculateMeta2= {\r\n        [CheckPoint.Ornak]: (val : number) => val * CheckPointCoeficient.Ornak,\r\n        [CheckPoint.Murowaniec]: (val : number) => val * CheckPointCoeficient.Murowaniec,\r\n        [CheckPoint.Wodogrzmoty]: (val : number) => val * CheckPointCoeficient.Wodogrzmoty,\r\n        [CheckPoint.Meta]: (val : number) => val * CheckPointCoeficient.Meta, //:D\r\n    };\r\n\r\n\r\n    const calculateMeta = {\r\n        [CheckPoint.Ornak]: () => raceResult.ornak * CheckPointCoeficient.Ornak,\r\n        [CheckPoint.Murowaniec]: () => raceResult.murowaniec * CheckPointCoeficient.Murowaniec,\r\n        [CheckPoint.Wodogrzmoty]: () => {\r\n            console.log(raceResult.wodogrzmoty);\r\n            return raceResult.wodogrzmoty * CheckPointCoeficient.Wodogrzmoty;\r\n        },\r\n        [CheckPoint.Meta]: () => raceResult.meta * CheckPointCoeficient.Meta, //:D\r\n    };\r\n    \r\n\r\n    const calculateMetaOld = {\r\n        [CheckPoint.Ornak]: () => Math.round((raceResult.ornak * CheckPointCoeficient.Ornak) / steps[CheckPoint.Ornak]) * steps[CheckPoint.Ornak],\r\n        [CheckPoint.Murowaniec]: () => Math.round((raceResult.murowaniec * CheckPointCoeficient.Murowaniec) / steps[CheckPoint.Murowaniec]) * steps[CheckPoint.Murowaniec],\r\n        [CheckPoint.Wodogrzmoty]: () => Math.round((raceResult.wodogrzmoty * CheckPointCoeficient.Wodogrzmoty) / steps[CheckPoint.Wodogrzmoty]) * steps[CheckPoint.Wodogrzmoty],\r\n        [CheckPoint.Meta]: () => Math.round((raceResult.meta * CheckPointCoeficient.Meta) / steps[CheckPoint.Meta]) * steps[CheckPoint.Meta], //:D\r\n    };\r\n\r\n\r\n    const calculate = {\r\n        [CheckPoint.Ornak]: () => raceResult.meta / CheckPointCoeficient.Ornak,\r\n        [CheckPoint.Murowaniec]: () => raceResult.meta / CheckPointCoeficient.Murowaniec,\r\n        [CheckPoint.Wodogrzmoty]: () => raceResult.meta / CheckPointCoeficient.Wodogrzmoty,\r\n        [CheckPoint.Meta]: () => raceResult.meta / CheckPointCoeficient.Meta, //:D\r\n    };\r\n    const calculateOld = {\r\n        [CheckPoint.Ornak]: () => Math.round((raceResult.meta / CheckPointCoeficient.Ornak) / steps[CheckPoint.Ornak]) * steps[CheckPoint.Ornak],\r\n        [CheckPoint.Murowaniec]: () => Math.round((raceResult.meta / CheckPointCoeficient.Murowaniec) / steps[CheckPoint.Murowaniec]) * steps[CheckPoint.Murowaniec],\r\n        [CheckPoint.Wodogrzmoty]: () => Math.round((raceResult.meta / CheckPointCoeficient.Wodogrzmoty) / steps[CheckPoint.Wodogrzmoty]) * steps[CheckPoint.Wodogrzmoty],\r\n        [CheckPoint.Meta]: () => Math.round((raceResult.meta / CheckPointCoeficient.Meta) / steps[CheckPoint.Meta]) * steps[CheckPoint.Meta], //:D\r\n    };\r\n\r\n    const updateRecipe = (item: CheckPoint, value: number) => {\r\n      \r\n        if(isMin[CheckPoint.Meta]() || isMin[CheckPoint.Ornak]() || isMin[CheckPoint.Wodogrzmoty]() || isMin[CheckPoint.Murowaniec]()\r\n        ||isMax[CheckPoint.Meta]() || isMax[CheckPoint.Ornak]() || isMax[CheckPoint.Wodogrzmoty]() || isMax[CheckPoint.Murowaniec]()){\r\n            return;\r\n        }\r\n\r\n\r\n        const updatedRecipe = { ...raceResult };\r\n\r\n\r\n\r\n        ///*\r\n        updatedRecipe[item] = Math.round(updatedRecipe[item]/steps[item]) * steps[item];\r\n\r\n        const val = updatedRecipe[item];\r\n        //console.log(val);\r\n        \r\n        for (const key in updatedRecipe) {\r\n            const keyItem = key as CheckPoint;\r\n           \r\n            if (updatedRecipe.hasOwnProperty(key)) {\r\n                if (key === item) {\r\n                    updatedRecipe[keyItem] = value;}\r\n                    else{\r\n\r\n                  updatedRecipe[keyItem] = calculateAll[item](val, keyItem);               \r\n                 }\r\n                }\r\n          }\r\n//*/\r\n\r\n\r\n/*\r\n        for (const key in updatedRecipe) {\r\n            const keyItem = key as CheckPoint;\r\n            if (updatedRecipe.hasOwnProperty(key)) {\r\n                if (key === item) {\r\n                    updatedRecipe[keyItem] = value;\r\n                } else {\r\n                    updatedRecipe[keyItem] = calculate[keyItem]();\r\n                }\r\n            }\r\n        }//*/\r\n\r\n        onRecipeChanged && onRecipeChanged(updatedRecipe);\r\n    };\r\n\r\n\r\n\r\n    const increaseRecipe = (item: CheckPoint) => {\r\n        const updatedRecipe = { ...raceResult };\r\n        if (isMax[item]()) return;\r\n        \r\n        updatedRecipe[item] = Math.round(updatedRecipe[item]/steps[item]) * steps[item];\r\n        updatedRecipe[item] += steps[item];\r\n        const val = updatedRecipe[item];\r\n        //console.log(val);\r\n        \r\n        for (const key in updatedRecipe) {\r\n            const keyItem = key as CheckPoint;\r\n           \r\n            if (updatedRecipe.hasOwnProperty(key)) {\r\n                  updatedRecipe[keyItem] = calculateAll[item](val, keyItem);                \r\n                }\r\n          }\r\n          //console.log(updatedRecipe);\r\n\r\n        onRecipeChanged && onRecipeChanged(updatedRecipe);\r\n    };\r\n\r\n\r\n    const decreaseRecipe = (item: CheckPoint) => {\r\n        const updatedRecipe = { ...raceResult };\r\n       \r\n\r\n        if (isMin[item]()) return;\r\n\r\n        updatedRecipe[item] = Math.round(updatedRecipe[item]/steps[item]) * steps[item];\r\n\r\n        updatedRecipe[item] -= steps[item];\r\n        const val = updatedRecipe[item];\r\n        //console.log(val);\r\n        \r\n        for (const key in updatedRecipe) {\r\n            const keyItem = key as CheckPoint;\r\n           \r\n            if (updatedRecipe.hasOwnProperty(key)) {\r\n                  updatedRecipe[keyItem] = calculateAll[item](val, keyItem);                \r\n                }\r\n          }\r\n\r\n        //console.log(updatedRecipe);\r\n\r\n        onRecipeChanged && onRecipeChanged(updatedRecipe);\r\n    };\r\n\r\n    const toTimeString = (val: number) => {\r\n        var s = new Date(val * 1000).toISOString().substr(11, 8);\r\n        return s;\r\n    };\r\n\r\n    const increaseButton = (item: CheckPoint) => (\r\n        <IconButton onClick={() => increaseRecipe(item)} color=\"primary\">\r\n            {isMax[CheckPoint.Meta]() || isMax[CheckPoint.Ornak]() || isMax[CheckPoint.Wodogrzmoty]() || isMax[CheckPoint.Murowaniec]()? <BlockIcon /> : <ArrowForwardIosIcon />}\r\n        </IconButton>\r\n    );\r\n\r\n    const decreaseButton = (item: CheckPoint) => (\r\n        <IconButton onClick={() => decreaseRecipe(item)} color=\"primary\">\r\n            {isMin[CheckPoint.Meta]() || isMin[CheckPoint.Ornak]() || isMin[CheckPoint.Wodogrzmoty]() || isMin[CheckPoint.Murowaniec]() ? <BlockIcon /> : <ArrowBackIosIcon />}\r\n        </IconButton>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* Coffee */}\r\n            \r\n            <Typography variant=\"button\">Ornak</Typography>\r\n            {decreaseButton(CheckPoint.Ornak)}\r\n            {increaseButton(CheckPoint.Ornak)}\r\n            <Slider\r\n               \r\n                value={raceResult.ornak}\r\n                min={0}\r\n                max={18*3600}\r\n                step={5*60}\r\n                onChange={(_, value) => updateRecipe(CheckPoint.Ornak, value as number)}\r\n                marks={[{ value: raceResult.ornak, label: toTimeString(raceResult.ornak) }]}\r\n            />\r\n\r\n            {/* Water */}\r\n            \r\n            <Typography variant=\"button\">Murowaniec</Typography>\r\n            {decreaseButton(CheckPoint.Murowaniec)}\r\n            {increaseButton(CheckPoint.Murowaniec)}\r\n            <Slider\r\n                value={raceResult.murowaniec}\r\n                min={0}\r\n                max={18*3600}\r\n                step={5*60}\r\n                onChange={(_, value) => updateRecipe(CheckPoint.Murowaniec, value as number)}\r\n                marks={[{ value: raceResult.murowaniec, label: toTimeString(raceResult.murowaniec) }]}\r\n            />\r\n            {/* Ratio */}\r\n\r\n           \r\n            <Typography variant=\"button\">Wodogrzmoty</Typography>\r\n            {decreaseButton(CheckPoint.Wodogrzmoty)}\r\n            {increaseButton(CheckPoint.Wodogrzmoty)}\r\n            <Slider\r\n                value={raceResult.wodogrzmoty}\r\n                min={0}\r\n                max={18*3600}\r\n                step={5*60}\r\n                onChange={(_, value) => updateRecipe(CheckPoint.Wodogrzmoty, value as number)}\r\n                marks={[{ value: raceResult.wodogrzmoty, label: toTimeString(raceResult.wodogrzmoty)}]}\r\n            />\r\n\r\n           {/* Ratio */}\r\n\r\n           \r\n           <Typography variant=\"button\">Meta</Typography>\r\n            {decreaseButton(CheckPoint.Meta)}\r\n            {increaseButton(CheckPoint.Meta)}\r\n            <Slider\r\n                value={raceResult.meta}\r\n                min={0}\r\n                max={18*3600}\r\n                step={5*60}\r\n                onChange={(_, value) => updateRecipe(CheckPoint.Meta, value as number)}\r\n                marks={[{ value: raceResult.meta, label: toTimeString(raceResult.meta)}]}\r\n            />\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default RaceResultEditor;\r\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { RaceResult } from './models/RaceResult';\nimport RaceResultEditor from './components/RaceResultEditor';\n\n\n\nconst App = () => {\n  const [raceResult, setRecipe] = useState(new RaceResult(15*3600));\n\n  return (\n    <Container maxWidth=\"sm\">\n    <Box>\n              <RaceResultEditor raceResult={raceResult} onRecipeChanged={setRecipe} />\n              </Box>\n        </Container>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}